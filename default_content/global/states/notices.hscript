importClass("StringTools");
importClass("flixel.math.FlxMath");
importClass("openfl.filters.ShaderFilter");
importClass("openfl.Lib");

// TRIVIA: This was originally all done through images, i wanted to make editable with code, so here we are!!!

importClass("Discord");
importClass("FadeTransitionSubstate");
importClass("MusicBeatState");
importClass("LoadingState");
importClass("options.OptionsState");
importClass("options.OptionsSubstate");
importClass("tgt.MainMenuState");
importClass("CreditsState");

var object:FlxSprite;
var canSelect:Bool = true;
var canMove:Bool = false;

var textTween:FlxTween;
var alphaTween:FlxTween;

// notice shit
var moveTween:FlxTween;
var curInfo:Int = 0;
var infoCard:FlxSpriteGroup;

var curSelected:Int = 1;
var chains:FlxSprite;

var thankYou:FlxSprite;
var thumb:FlxSprite;
var takesPlace:FlxSprite;
var takeMe:FlxSprite;
var ignore:FlxSprite;

function onStateCreate(){
    persistentUpdate = true;
	persistentDraw = true;

    MusicBeatState.stopMenuMusic();

    FadeTransitionSubstate.nextCamera = FlxG.camera; // AAAA
    
    Paths.pushGlobalContent();
    Paths.loadTheFirstEnabledMod();
    FlxG.mouse.visible = false;
    FlxG.camera.bgColor = FlxColor.BLACK;

    camFollow = new FlxSprite().makeGraphic(1, 1, 0xFF000000);
    camFollow.alpha = 0;
    camFollow.setPosition(951,570);
    //FlxTween.tween(camFollowPos,  {x: camFollowPos.x + 1000}, 1.0, {ease: FlxEase.sineInOut, type: FlxTween.PINGPONG});
    camFollowPos = new FlxObject(951,-270, 1, 1);
    add(camFollow);
    add(camFollowPos);

    FlxG.camera.zoom = 0.593;
    FlxG.camera.follow(camFollowPos, null, 1);


    chains = new FlxSprite(-370,-120, Paths.image('chains'));
    chains.scrollFactor.set(0,0);
    chains.scale.set(1.7,1.7);
    chains.alpha = 0.4;
    add(chains);

    nextCard();

    thankYou = new FlxSprite(0,0, Paths.image('thankYou'));
    thankYou.scrollFactor.set(0,0);
    thankYou.scale.set(1.7,1.7);
    thankYou.alpha = 0;
    add(thankYou);

    ignore = new FlxSprite(0,0, Paths.image('ignore'));
    ignore.scrollFactor.set(0,0);
    ignore.scale.set(1.65,1.65);
    ignore.alpha = 0;
    add(ignore);

    takeMe = new FlxSprite(0,0, Paths.image('takeMe'));
    takeMe.scrollFactor.set(0,0);
    takeMe.scale.set(1.65,1.65);
    takeMe.alpha = 0;
    add(takeMe);

    takesPlace = new FlxSprite(0,0, Paths.image('takesPlace'));
    takesPlace.scrollFactor.set(0,0);
    takesPlace.scale.set(1.7,1.7);
    takesPlace.alpha = 0;
    add(takesPlace);

    thumb = new FlxSprite(0,0, Paths.image('thumb'));
    thumb.scrollFactor.set(0,0);
    thumb.scale.set(1.7,1.7);
    thumb.alpha = 0;
    add(thumb);
    
    addTouchPad("LEFT_RIGHT", "A_B");
    addTouchPadCamera();

    object = thankYou;
}

function onStateCreatePost(){
    
}


function onUpdate(elapsed:Float){
    inputShit();
}


function inputShit(){
    if (!canSelect){return;}

    if (FlxG.keys.justPressed.SPACE || FlxG.keys.justPressed.ENTER|| FlxG.keys.justPressed.Z||controls.ACCEPT)  {
        canSelect = false;
        FlxG.sound.play(Paths.sound('confirmMenu'));
        
        if (curInfo == 5){
            if (curSelected == 1){
                hideThumb();
            }
            else {
                CoolUtil.browserLoad('https://youtu.be/kXgwi83JTXE?si=k4trGmz-052tfLZ8');
                canSelect = true;
            }
        } else if (curInfo == 6){
            hideThankYou();
        } else {
            removeInfoCard();
        }
    }

    if (!canMove){return;}

    if (controls.UI_RIGHT_P || controls.BACK)
    {
        FlxG.sound.play(Paths.sound('scrollMenu'));
        curSelected += 1;
        if (curSelected > 1){
            curSelected = 0;
        }
        updateOption();
    }

    if (controls.UI_LEFT_P || controls.ACCEPT)
    {
        FlxG.sound.play(Paths.sound('scrollMenu'));
        curSelected -= 1;
        if (curSelected < 0){
            curSelected = 1;
        }
        updateOption();
    }
}

function updateOption():Void
{
    if (curSelected == 0){
        takeMe.alpha = 1;
        takeMe.scale.set(1.7,1.7);

        ignore.alpha = 0.4;
        ignore.scale.set(1.65,1.65);
    } else {
        ignore.alpha = 1;
        ignore.scale.set(1.7,1.7);

        takeMe.alpha = 0.4;
        takeMe.scale.set(1.65,1.65);
    }
}

function createInfoCard(infoText:String, subInfoText:String){
    trace("createInfoCard");
     // main 0,0
    // left -1610,0
    // right 1710,0
    if (infoCard != null){
        remove(infoCard);
    }

    infoCard = new FlxSpriteGroup();
    add(infoCard);
    
    if (moveTween != null){
        moveTween.cancel();
    }

    if (textTween != null){
        textTween.cancel();
    }

    var infoSprite = new FlxSprite(290,-630, Paths.image('infoCard'));
    infoSprite.scrollFactor.set(0,0);
    infoSprite.scale.set(1,1);
    infoSprite.alpha = 0.8;
    infoCard.add(infoSprite);

    var mainText = new FlxText(441,-460, 1000, infoText, 16);
    mainText.setFormat(Paths.font("VollkornRegular-ZVJEZ.ttf"), 48, 0xFFFFFFFF, FlxTextAlign.CENTER);
    infoCard.add(mainText);

    var subText = new FlxText(441,-140, 1000, subInfoText, 16);
    subText.setFormat(Paths.font("VollkornRegular-ZVJEZ.ttf"), 52, 0xCC5363, FlxTextAlign.CENTER);
    infoCard.add(subText);
    subText.alpha = 0;

    infoCard.x = -1610;
    infoCard.alpha = 0;
    
    moveTween = FlxTween.tween(infoCard,  {x: 0,alpha: 1}, 0.2, {ease: FlxEase.sineOut});
    textTween = FlxTween.tween(subText,  {alpha: 1}, 1, {ease: FlxEase.sineOut});
}

function removeInfoCard(){
    if (moveTween != null){
        moveTween.cancel();
    }

    if (textTween != null){
        textTween.cancel();
    }

    moveTween = FlxTween.tween(infoCard, {x: 1710,alpha: 0}, 0.2, {ease: FlxEase.sineOut, onComplete: nextCard});
}

function nextCard(){
    
    new FlxTimer().start(1, function(tmr){
        canSelect = true;
        tmr.destroy();
    });
    trace("nextCard");

    switch (curInfo){
        case 0:
            createInfoCard("\nThis game contains flashing imagery\nwhich may trigger epileptic seizures.", "I understand. →");
            trace("curinfo = 0");
        case 1:
            createInfoCard("\nFriday Night Funkin' is property of\nThe Funkin' Crew Inc.\nAnd is presented by Newgrounds.", "I understand. →");
        case 2:
			createInfoCard("If you have a weaker PC or experience lag, check the Video options.\nLow Quality mode and Shaders OFF will help in most cases.", "I understand. →");
		case 3:
            createInfoCard("\n\nYOU ARE THE KEY.", "I understand. →");
        case 4:
            showThumb();
        case 5:
            showThankYou();
    }   

    curInfo++;
    trace("cur info: "+curInfo);
}

function showThankYou(){
    if (alphaTween != null){
        alphaTween.cancel();
    }

    new FlxTimer().start(2, function(tmr){
        if (canSelect){
            hideThankYou();
        }
        tmr.destroy();
    });
    
    
    alphaTween = FlxTween.tween(thankYou,  {alpha: 1}, 1, {ease: FlxEase.sineInOut});
}

function hideThankYou(){
    alphaTween = FlxTween.tween(thankYou,  {alpha: 0}, 1, {ease: FlxEase.sineInOut, onComplete: leaveScene});
}

function leaveScene(){
    var state = new HScriptState("softCodeMenu");
	state.stateScript.set("showTitle", true);
    MusicBeatState.switchState(state);
}

function showThumb(){
    if (alphaTween != null){
        alphaTween.cancel();
    }

    new FlxTimer().start(1, function(tmr){
        canMove = true;
        updateOption();
        tmr.destroy();
    });
   
    alphaTween = FlxTween.tween(takesPlace,  {alpha: 1}, 1, {ease: FlxEase.sineInOut});
    FlxTween.tween(thumb,  {alpha: 1}, 1, {ease: FlxEase.sineInOut});
    FlxTween.tween(takeMe,  {alpha: 0.4}, 0.4, {ease: FlxEase.sineInOut});
    FlxTween.tween(ignore,  {alpha: 0.4}, 0.5, {ease: FlxEase.sineInOut});
}

function hideThumb(){
    canMove = false;
    if (alphaTween != null){
        alphaTween.cancel();
    }
    FlxTween.tween(chains,  {alpha: 0}, 4, {ease: FlxEase.sineInOut});
    alphaTween = FlxTween.tween(takesPlace,  {alpha: 0}, 1, {ease: FlxEase.sineInOut, onComplete: nextCard});
    FlxTween.tween(thumb,  {alpha: 0}, 1, {ease: FlxEase.sineInOut});
    FlxTween.tween(takeMe,  {alpha: 0}, 1, {ease: FlxEase.sineInOut});
    FlxTween.tween(ignore,  {alpha: 0}, 1, {ease: FlxEase.sineInOut});
}
